buildscript {
	repositories {
		maven {
			url = "file:///${projectDir}/../build/mavenRepo"
		}
		maven {
			url = "https://maven.minecraftforge.net"
		}
		mavenCentral()
	}
	dependencies {
		classpath group: "info.u-team.gradle_files", name: "gradle_files", version: "1.0.0", changing: true
	}
}

apply plugin: "info.u_team.gradle_files"
apply plugin: "maven-publish"

group = "info.u-team"
archivesBaseName = "test_mod"
version = "1.0.0"

gradlefiles {
	vendor "Team UTeam"

	signJars true
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withDeobfJar()
	withSourcesJar()
	withJavadocJar()
}

minecraft {
	mappings channel: config.forge.mapping_channel, version: config.forge.mapping

	runs {
		client = {
			workingDirectory file("run/client")

			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		server = {
			workingDirectory file("run/server")

			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		data = {
			workingDirectory file("run/data")

			args "--mod", config.mod.modid
			args "--all"
			args "--output", file("src/generated/resources")
			args "--validate"
			args "--existing", file("src/main/resources")

			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
	}
}

tasks.withType(Jar) { task ->
	manifest gradlefiles.defaultManifest()
	gradlefiles.defaultJar(task)
}

dependencies {
	minecraft gradlefiles.forgeDependency()

	implementation "net.harawata:appdirs:1.0.0"
	implementation fg.deobf("info.u-team:u_team_core-1.18.1:4.0.0.201-SNAPSHOT")
}

publishing {
	repositories {
		maven {
			url layout.buildDirectory.dir("mavenRepo")
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId archivesBaseName

			from components.java
		}
	}
}

/*
 println "---------------------------------------------------------------------------------------------------------"
 //println project.getExtensions().getByType(DefaultArtifactPublicationSet)
 println ""
 println ""
 println components.java
 println components.java.getName()
 println components.java.getUsages().each { usages ->
 println usages.getName()
 println usages.getArtifacts().each { artifact ->
 println artifact
 println artifact.getName()
 println artifact.getExtension()
 println artifact.getType()
 println artifact.getClassifier()
 println artifact.getFile()
 println "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"
 }
 println "---------------------------------------------------------------------------------------------------------"
 }
 /*
 println "ROROROROOROROROROR"
 artifacts {
 archives jar
 archives deobfJar
 archives sourcesJar
 archives javadocJar
 }
 println project.configurations.getByName("archives").allArtifacts
 println project.configurations.getByName("archives").allArtifacts.getClass()
 println project.configurations.getByName("archives").allArtifacts.getMetaClass()
 project.configurations.getByName("archives").allArtifacts.each { artifact ->
 println artifact
 println artifact.getName()
 println artifact.getExtension()
 println artifact.getType()
 println artifact.getClassifier()
 println artifact.getFile()
 println "____________________________________________"
 }
 */


/*configurations.resolvedConfiguration.resolvedArtifacts.each { artifact ->
 println artifact.moduleVersion.id.group
 println artifact.moduleVersion.id.name
 println artifact.moduleVersion.id.version
 println artifact.file
 }*/