plugins {
	id "java-gradle-plugin"
	id "groovy"
	id "maven-publish"
	id "eclipse"
	id "com.palantir.launch-config" version "1.2.0"
}

group = "info.u-team.gradle_files"
archivesBaseName = "gradle_files"
version = "1.0.0"
description = "Gradle plugin for special gradle files used for mods by u-team"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withSourcesJar()
	withJavadocJar()
}

sourceSets {
	main {
		java {
			srcDirs = []
		}
		groovy {
			srcDirs = [
				"src/main/java",
				"src/main/groovy"
			]
		}
	}
}

gradlePlugin {
	plugins {
		gradleFilesPlugin {
			id = "info.u_team.gradle_files"
			implementationClass = "info.u_team.gradle_files_plugin.GradleFilesPlugin"
		}
	}
	automatedPublishing = false
}

// Fix no sources for gradle api (https://stackoverflow.com/questions/22694199/gradle-api-sources-and-doc-when-writing-gradle-plugins)
plugins.withType(EclipsePlugin) {
	plugins.withType(JavaBasePlugin) {
		eclipse {
			classpath {
				file {
					whenMerged { classpath ->
						final def gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, "/")
						final def gradleSourceDirectory = "${gradleHome}/src"
						classpath.entries.each { entry ->
							if (entry in org.gradle.plugins.ide.eclipse.model.AbstractLibrary && entry.library.path.contains('generated-gradle-jars')) {
								entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath(gradleSourceDirectory)
							}
						}
					}
				}
			}
		}
	}
}

repositories {
	maven {
		url = "https://maven.minecraftforge.net"
	}
	mavenCentral()
}

dependencies {
	implementation group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
	implementation group: "org.apache.commons", name: "commons-lang3", version: "3.9"
}

jar.manifest.mainAttributes([
	"Implementation-Title": project.name,
	"Implementation-Version": project.version
])

[compileJava, compileGroovy].each {
	it.options.encoding = "UTF-8"
	it.options.deprecation = true
	it.options.fork = true
}

task runPluginTest(type: JavaExec) {
	def run = file("${rootDir}/test")

	workingDir  run
	main "info.u_team.gradle_files_plugin.test.GradleFilesPluginTest"
	systemProperties = [
		"gradle.project_dir": "\"${run}\""
	]
}

publishing {
	repositories {
		maven {
			url layout.buildDirectory.dir("mavenRepo")
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archivesBaseName

			from components.java
		}
	}
}