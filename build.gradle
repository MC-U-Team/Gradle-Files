plugins {
	id "java-gradle-plugin"
	id "groovy"
	id "maven-publish"
	id "eclipse"
}

group = "info.u-team.gradle_files"
base.archivesName = "gradle_files"
version = "4.0.0-SNAPSHOT"
description = "Gradle plugin for special gradle files used for mods by u-team"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withSourcesJar()
	withJavadocJar()
}

sourceSets {
	main {
		java {
			srcDirs = []
		}
		groovy {
			srcDirs = [
				"src/main/java",
				"src/main/groovy"
			]
		}
	}
}

gradlePlugin {
	plugins {
		gradleFilesPlugin {
			id = "info.u_team.gradle_files"
			implementationClass = "info.u_team.gradle_files_plugin.GradleFilesPlugin"
		}
		signJarPlugin {
			id = "info.u_team.sign_jar"
			implementationClass = "info.u_team.sign_jar_plugin.SignJarPlugin"
		}
	}
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}

// Fix no sources for gradle api (https://stackoverflow.com/questions/22694199/gradle-api-sources-and-doc-when-writing-gradle-plugins)
plugins.withType(EclipsePlugin) {
	plugins.withType(JavaBasePlugin) {
		eclipse {
			classpath {
				file {
					whenMerged { classpath ->
						final def gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, "/")
						final def gradleSourceDirectory = "${gradleHome}/src"
						classpath.entries.each { entry ->
							if (entry in org.gradle.plugins.ide.eclipse.model.AbstractLibrary && entry.library.path.contains('generated-gradle-jars')) {
								entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath(gradleSourceDirectory)
							}
						}
					}
				}
			}
		}
	}
}

repositories {
	maven {
		url = "https://maven.minecraftforge.net"
	}
	mavenCentral()
}

dependencies {
	implementation group: "org.apache.commons", name: "commons-lang3", version: "3.14.0"
	//implementation group: "com.google.guava", name: "guava", version: "32.1.3-jre"
}

jar.manifest.mainAttributes([
	"Implementation-Title": project.name,
	"Implementation-Version": project.version
])

[compileJava, compileGroovy].each {
	it.options.encoding = "UTF-8"
	it.options.deprecation = true
	it.options.fork = true
}

compileGroovy {
	groovyOptions.optimizationOptions.indy = true
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = getValue("maven.password")
			}
		}
	}
	publications {
		pluginMaven(MavenPublication) {
			artifactId = base.archivesName.get()

			pom {
				name = base.archivesName.get()
				description = project.description
				url = "https://github.com/MC-U-Team/Gradle-Files"
				scm {
					url = "https://github.com/MC-U-Team/Gradle-Files"
					connection = "scm:git:git://github.com/MC-U-Team/Gradle-Files.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/Gradle-Files.git"
				}
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/Gradle-Files/issues"
				}
				licenses {
					license {
						name = "All rights reserved"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
				}
			}
		}
	}
}

def getValue(name) {
	def envVariable = System.getenv(name)
	if(envVariable != null) {
		return envVariable
	} else {
		if (project.hasProperty(name)) {
			return project.getProperty(name)
		}
	}
	return null
}